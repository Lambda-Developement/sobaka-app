package com.dennis.sceneformanim;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Toast;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.ar.core.Anchor;
import com.google.ar.core.HitResult;
import com.google.ar.core.Plane;
import com.google.ar.sceneform.AnchorNode;
import com.google.ar.sceneform.FrameTime;
import com.google.ar.sceneform.Scene;
import com.google.ar.sceneform.animation.ModelAnimator;
import com.google.ar.sceneform.rendering.AnimationData;
import com.google.ar.sceneform.rendering.ModelRenderable;
import com.google.ar.sceneform.ux.ArFragment;
import com.google.ar.sceneform.ux.BaseArFragment;
import com.google.ar.sceneform.ux.TransformableNode;

import android.content.res.Resources;
import android.widget.Button;

import com.google.ar.sceneform.math.Vector3;
import com.google.ar.sceneform.math.Quaternion;

import android.webkit.WebView;
import android.webkit.WebSettings;
import android.util.Log;

import android.media.MediaPlayer;
import android.content.res.AssetFileDescriptor;

import java.io.InputStream;
import java.io.IOException;
import java.util.Scanner;
import android.util.Base64;

public class HelloArActivity extends AppCompatActivity {

    //Variable
    private ArFragment arFragment;
    private AnchorNode anchorNode;
    private ModelAnimator animator;
    private int nextAnimation;
    private Button btn_anim;
    private ModelRenderable animationCrab;
    private TransformableNode transformableNode;
    private Resources R;
    private boolean walkForward = false;
    private int walkCount = 4;
    private boolean positioned = true;
    private AssetFileDescriptor afd;
    private MediaPlayer mp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	// Log.d(asa);
        super.onCreate(savedInstanceState);
        this.R = getResources();
        Log.d("aboba","asdas");
        String result = "";
        setContentView(HelloArActivity.this.R.getIdentifier("activity_main", "layout", getApplicationContext().getPackageName()));
		WebView mywebview = (WebView) findViewById(this.R.getIdentifier("webview-ui", "id", getApplicationContext().getPackageName()));
        if (mywebview != null) {
	        try(InputStream inputStream = getApplicationContext().getAssets().open("top.html")){
	        	Scanner s = new Scanner(inputStream).useDelimiter("\\A");
	        	result = s.hasNext() ? s.next() : "";
	        }
	        catch (IOException e){
	               e.printStackTrace();
	        }
            WebSettings webs = mywebview.getSettings();
            webs.setJavaScriptEnabled(true);
			String base64wvhtml = Base64.encodeToString(result.getBytes(),
			        Base64.NO_PADDING);
			
            // String base64wvhtml = "";
            //Full page html
            //String base64wvhtml = "";
            mywebview.loadData(base64wvhtml, "text/html", "base64");
            mywebview.setBackgroundColor(0x00000000);
        } else {
            Log.e("ERORRR!!! --> ", "Webview top is null");
        }

        WebView mywebview_bottom = (WebView) findViewById(this.R.getIdentifier("webview-sub", "id", getApplicationContext().getPackageName()));
        if (mywebview_bottom != null) {
        	try(InputStream inputStream = getApplicationContext().getAssets().open("bottom.html")){
        		Scanner s = new Scanner(inputStream).useDelimiter("\\A");
        		result = s.hasNext() ? s.next() : "";
        	}
        	catch (IOException e){
        		e.printStackTrace();
        	}
            WebSettings webs = mywebview_bottom.getSettings();
            webs.setJavaScriptEnabled(true);
			String base64wvhtml = Base64.encodeToString(result.getBytes(),
						        Base64.NO_PADDING);
            //playSubtitles() to playSubtitles
            // Subtitles 1 sec autostart
            //String base64wvhtml = "";
            //Full page html
            //String base64wvhtml = "";
            mywebview_bottom.loadData(base64wvhtml, "text/html", "base64");
            mywebview_bottom.setBackgroundColor(0x00000000);
        } else {
            Log.e("ERORRR!!! --> ", "Webview bottom is null");
        }

        arFragment = (ArFragment) getSupportFragmentManager()
                .findFragmentById(HelloArActivity.this.R.getIdentifier("sceneform_fragment", "id", getApplicationContext().getPackageName()));
        //Tap on plane event
        arFragment.setOnTapArPlaneListener(new BaseArFragment.OnTapArPlaneListener() {
            @Override
            public void onTapPlane(HitResult hitResult, Plane plane, MotionEvent motionEvent) {
                if (animationCrab == null)
                    return;
                //Create the Anchor
                Anchor anchor = hitResult.createAnchor();
                if (anchorNode == null) //If crab is not place on plane
                {
                    anchorNode = new AnchorNode(anchor);
                    anchorNode.setParent(arFragment.getArSceneView().getScene());

                    transformableNode = new TransformableNode(arFragment.getTransformationSystem());
                    //Scale model
                    transformableNode.getScaleController().setMinScale(0.25f);
                    transformableNode.getScaleController().setMaxScale(0.75f);

                    transformableNode.setParent(anchorNode);
                    transformableNode.setRenderable(animationCrab);
                }
            }
        });

        //Add frame update to control state of button
        arFragment.getArSceneView().getScene()
                .addOnUpdateListener(new Scene.OnUpdateListener() {
                    public void onUpdate(FrameTime frameTime) {
                        if (anchorNode == null) {
                            if (btn_anim.isEnabled()) {
                                btn_anim.setBackgroundTintList(ColorStateList.valueOf(Color.GRAY));
                                btn_anim.setEnabled(false);

                            }
                        } else {
                            if (!btn_anim.isEnabled()) {
                                btn_anim.setBackgroundTintList(ContextCompat.getColorStateList(HelloArActivity.this, HelloArActivity.this.R.getIdentifier("colorAccent", "color", getApplicationContext().getPackageName())));
                                btn_anim.setEnabled(true);
                            }
                        }
                        if (walkForward && animator.isRunning()) {
                            float delta = frameTime.getDeltaSeconds();
                            Vector3 dogPosition = Vector3.add(Quaternion.rotateVector(transformableNode.getWorldRotation(), new Vector3(0.0f, 0.0f, -1 * delta * 0.085f)), transformableNode.getWorldPosition());
                            transformableNode.setWorldPosition(dogPosition);
                        } else {
                            if (animator != null && walkCount <= 4) {
                                // Продолжить ту же анимацию
                                AnimationData data = animationCrab.getAnimationData(nextAnimation);
                                nextAnimation = nextAnimation % animationCrab.getAnimationDataCount();
                                animator = new ModelAnimator(data, animationCrab);
                                animator.start();

                                walkCount += 1;
                            } else if (animator == null || walkCount > 4) {
                                walkForward = false;

                                if (transformableNode != null && positioned == false) {
                                    //Конец ходьбы
                                    Vector3 cameraPosition = transformableNode.getScene().getCamera().getWorldPosition();
                                    Vector3 cardPosition = transformableNode.getWorldPosition();

                                    Vector3 direction = Vector3.subtract(cameraPosition, cardPosition);
                                    direction = new Vector3(direction.x, 0, direction.z);
                                    transformableNode.setWorldRotation(Quaternion.lookRotation(direction, Vector3.up()));
                                    positioned = true;

                                    HelloArActivity.this.mp = new MediaPlayer();
                                    //MediaPlayer mp = new MediaPlayer();
                                    try {
                                        // mp.setDataSource("https://cf-hls-media.sndcdn.com/media/0/31762/0xFrDRDPJsJa.128.mp3?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiKjovL2NmLWhscy1tZWRpYS5zbmRjZG4uY29tL21lZGlhLyovKi8weEZyRFJEUEpzSmEuMTI4Lm1wMyIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTY0ODg5NTIzMH19fV19&Signature=BGmbs7sExsVRu6cDBnbwW0b2DF-osuLYovlqyMMuxMzXIVC66AAKzo7z9IWevKawbomr-vt4oCYnLl0ITV91doNuLEOwrc0O7WATIzg3iOji6As0OKELHUhSEe7NxqUiLb5TEZMGup4VKkJUqzcyXGsHZLxzhkcBDDoQKqOAX4xDHmmqgRdyZDEY8KyOUsNQO15QCWMZYEs3j2NpLCL0Z--jfsWdjfaM4vil7A1chbxmVmvp40BO3KlACalXPpTrIxaMX7SIrW5zaJmvMCeCItBBhLWlQ0~b03HOMbfk~Y~2AxMkejPdl6-Y2QAyDuidIfpIZ9XOYBmnHQSZyLgKfg__&Key-Pair-Id=APKAI6TU7MMXM5DG6EPQ");
                                        // TODO: Понять почему перестает играть шарманка
                                        HelloArActivity.this.afd = getAssets().openFd("museum.mp3");
                                        //AssetFileDescriptor afd = getAssets().openFd("museum.mp3");
                                        HelloArActivity.this.mp.setDataSource(HelloArActivity.this.afd.getFileDescriptor(), HelloArActivity.this.afd.getStartOffset(), HelloArActivity.this.afd.getLength());
                                        HelloArActivity.this.mp.prepare();
                                        HelloArActivity.this.mp.start();
                                        mywebview_bottom.loadUrl("javascript:playSubtitles()");
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                }
                            }
                        }

                    }


                });
        btn_anim = (Button) findViewById(HelloArActivity.this.R.getIdentifier("btn_anim", "id", getApplicationContext().getPackageName()));
        btn_anim.setEnabled(false);
        btn_anim.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (animator == null || !animator.isRunning()) {
                    AnimationData data = animationCrab.getAnimationData(nextAnimation);
                    nextAnimation = (nextAnimation + 1) % animationCrab.getAnimationDataCount();
                    animator = new ModelAnimator(data, animationCrab);
                    animator.start();
                    walkForward = true;
                    walkCount = 0;
                    positioned = false;
                }
            }
        });

        setupModel();
    }

    private void setupModel() {
        ModelRenderable.builder()
                .setSource(this, HelloArActivity.this.R.getIdentifier("cangrejo", "raw", getApplicationContext().getPackageName()))
                .build()
                .thenAccept(renderable -> animationCrab = renderable)
                .exceptionally(throwable -> {
                    Toast.makeText(this, "" + throwable.getMessage(), Toast.LENGTH_SHORT).show();
                    return null;
                });
    }
}
