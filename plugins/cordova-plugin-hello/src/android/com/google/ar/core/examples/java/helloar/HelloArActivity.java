/*
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ar.core.examples.java.helloar;

import android.content.DialogInterface;
import android.content.res.Resources;
import android.media.Image;
import android.opengl.GLES30;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageButton;
import android.widget.PopupMenu;
import android.widget.Toast;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import com.google.ar.core.Anchor;
import com.google.ar.core.ArCoreApk;
import com.google.ar.core.Camera;
import com.google.ar.core.Config;
import com.google.ar.core.Config.InstantPlacementMode;
import com.google.ar.core.DepthPoint;
import com.google.ar.core.Frame;
import com.google.ar.core.HitResult;
import com.google.ar.core.InstantPlacementPoint;
import com.google.ar.core.LightEstimate;
import com.google.ar.core.Plane;
import com.google.ar.core.Point;
import com.google.ar.core.Point.OrientationMode;
import com.google.ar.core.PointCloud;
import com.google.ar.core.Session;
import com.google.ar.core.Trackable;
import com.google.ar.core.TrackingFailureReason;
import com.google.ar.core.TrackingState;
import com.google.ar.core.examples.java.common.helpers.CameraPermissionHelper;
import com.google.ar.core.examples.java.common.helpers.DepthSettings;
import com.google.ar.core.examples.java.common.helpers.DisplayRotationHelper;
import com.google.ar.core.examples.java.common.helpers.FullScreenHelper;
import com.google.ar.core.examples.java.common.helpers.InstantPlacementSettings;
import com.google.ar.core.examples.java.common.helpers.SnackbarHelper;
import com.google.ar.core.examples.java.common.helpers.TapHelper;
import com.google.ar.core.examples.java.common.helpers.TrackingStateHelper;
import com.google.ar.core.examples.java.common.samplerender.Framebuffer;
import com.google.ar.core.examples.java.common.samplerender.GLError;
import com.google.ar.core.examples.java.common.samplerender.Mesh;
import com.google.ar.core.examples.java.common.samplerender.SampleRender;
import com.google.ar.core.examples.java.common.samplerender.Shader;
import com.google.ar.core.examples.java.common.samplerender.Texture;
import com.google.ar.core.examples.java.common.samplerender.VertexBuffer;
import com.google.ar.core.examples.java.common.samplerender.arcore.BackgroundRenderer;
import com.google.ar.core.examples.java.common.samplerender.arcore.PlaneRenderer;
import com.google.ar.core.examples.java.common.samplerender.arcore.SpecularCubemapFilter;
import com.google.ar.core.exceptions.CameraNotAvailableException;
import com.google.ar.core.exceptions.NotYetAvailableException;
import com.google.ar.core.exceptions.UnavailableApkTooOldException;
import com.google.ar.core.exceptions.UnavailableArcoreNotInstalledException;
import com.google.ar.core.exceptions.UnavailableDeviceNotCompatibleException;
import com.google.ar.core.exceptions.UnavailableSdkTooOldException;
import com.google.ar.core.exceptions.UnavailableUserDeclinedInstallationException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import cordova.*;
import android.webkit.WebView;
import android.webkit.WebSettings;




/**
 * This is a simple example that shows how to create an augmented reality (AR) application using the
 * ARCore API. The application will display any detected planes and will allow the user to tap on a
 * plane to place a 3D model.
 */
public class HelloArActivity extends AppCompatActivity implements SampleRender.Renderer {

  private Resources R; 

  private static final String TAG = HelloArActivity.class.getSimpleName();

  private static final String SEARCHING_PLANE_MESSAGE = "Searching for surfaces...";
  private static final String WAITING_FOR_TAP_MESSAGE = "Tap on a surface to place an object.";

  // See the definition of updateSphericalHarmonicsCoefficients for an explanation of these
  // constants.
  private static final float[] sphericalHarmonicFactors = {
    0.282095f,
    -0.325735f,
    0.325735f,
    -0.325735f,
    0.273137f,
    -0.273137f,
    0.078848f,
    -0.273137f,
    0.136569f,
  };

  private static final float Z_NEAR = 0.1f;
  private static final float Z_FAR = 100f;

  private static final int CUBEMAP_RESOLUTION = 16;
  private static final int CUBEMAP_NUMBER_OF_IMPORTANCE_SAMPLES = 32;

  // Rendering. The Renderers are created here, and initialized when the GL surface is created.
  private GLSurfaceView surfaceView;

  private boolean installRequested;

  private Session session;
  private final SnackbarHelper messageSnackbarHelper = new SnackbarHelper();
  private DisplayRotationHelper displayRotationHelper;
  private final TrackingStateHelper trackingStateHelper = new TrackingStateHelper(this);
  private TapHelper tapHelper;
  private SampleRender render;

  private PlaneRenderer planeRenderer;
  private BackgroundRenderer backgroundRenderer;
  private Framebuffer virtualSceneFramebuffer;
  private boolean hasSetTextureNames = false;

  private final DepthSettings depthSettings = new DepthSettings();
  private boolean[] depthSettingsMenuDialogCheckboxes = new boolean[2];

  private final InstantPlacementSettings instantPlacementSettings = new InstantPlacementSettings();
  private boolean[] instantPlacementSettingsMenuDialogCheckboxes = new boolean[1];
  // Assumed distance from the device camera to the surface on which user will try to place objects.
  // This value affects the apparent scale of objects while the tracking method of the
  // Instant Placement point is SCREENSPACE_WITH_APPROXIMATE_DISTANCE.
  // Values in the [0.2, 2.0] meter range are a good choice for most AR experiences. Use lower
  // values for AR experiences where users are expected to place objects on surfaces close to the
  // camera. Use larger values for experiences where the user will likely be standing and trying to
  // place an object on the ground or floor in front of them.
  private static final float APPROXIMATE_DISTANCE_METERS = 2.0f;

  // Point Cloud
  private VertexBuffer pointCloudVertexBuffer;
  private Mesh pointCloudMesh;
  private Shader pointCloudShader;
  // Keep track of the last point cloud rendered to avoid updating the VBO if point cloud
  // was not changed.  Do this using the timestamp since we can't compare PointCloud objects.
  private long lastPointCloudTimestamp = 0;

  // Virtual object (ARCore pawn)
  private Mesh virtualObjectMesh;
  private Shader virtualObjectShader;
  private Texture virtualObjectAlbedoTexture;
  private Texture virtualObjectAlbedoInstantPlacementTexture;

  private final List<WrappedAnchor> wrappedAnchors = new ArrayList<>();

  // Environmental HDR
  private Texture dfgTexture;
  private SpecularCubemapFilter cubemapFilter;

  // Temporary matrix allocated here to reduce number of allocations for each frame.
  private final float[] modelMatrix = new float[16];
  private final float[] viewMatrix = new float[16];
  private final float[] projectionMatrix = new float[16];
  private final float[] modelViewMatrix = new float[16]; // view x model
  private final float[] modelViewProjectionMatrix = new float[16]; // projection x view x model
  private final float[] sphericalHarmonicsCoefficients = new float[9 * 3];
  private final float[] viewInverseMatrix = new float[16];
  private final float[] worldLightDirection = {0.0f, 0.0f, 0.0f, 0.0f};
  private final float[] viewLightDirection = new float[4]; // view x world light direction

  private final String pkg = "com.google.ar.core.examples.java.helloar";

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    Log.e("PACKAGENAME!!! --> ", getApplicationContext().getPackageName());
  
    super.onCreate(savedInstanceState);
    
    this.R = getResources();
    
    setContentView(this.R.getIdentifier("activity_main", "layout", getApplicationContext().getPackageName()));
    
    WebView mywebview = (WebView) findViewById(this.R.getIdentifier("webview-ui", "id", getApplicationContext().getPackageName()));
    if (mywebview != null) {
      WebSettings webs = mywebview.getSettings();
      webs.setJavaScriptEnabled(true);
      String base64wvhtml = "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7Ij4KCjxoZWFkPgoKICAgIDwhLS0gPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIuLi8uLi91aS1raXQvY3NzL2Jvb3RzdHJhcC5jc3MiPiAtLT4KCiAgICA8c3R5bGU+CiAgICAgICAgLyog0L7RgtC60LvRjtGH0LXQvdC40LUg0LHRg9GC0YHRgtGA0LDQv9C+0LLRgdC60L7QuSDQvNC10YjQsNC90LjQvdGLICovCiAgICAgICAgaW5wdXRbdHlwZT0iY2hlY2tib3giXTpmb2N1cywKICAgICAgICBpbnB1dFt0eXBlPSJyYWRpbyJdOmZvY3VzLAogICAgICAgIHNlbGVjdC5mb3JtLXNlbGVjdDpmb2N1cywKICAgICAgICAuYnRuOmZvY3VzIHsKICAgICAgICAgICAgb3V0bGluZTogMCBub25lOwogICAgICAgICAgICBib3gtc2hhZG93OiBub25lOwogICAgICAgIH0KCiAgICAgICAgLmJ0biB7CiAgICAgICAgICAgIHdpZHRoOiAyODBweDsKICAgICAgICAgICAgaGVpZ2h0OiA0OHB4OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgfQoKCiAgICAgICAgLyogY9GC0LjQu9C4INC60L3QvtC/0L7QuiAqLwogICAgICAgIC5idG4taG9sbG93LAogICAgICAgIC5idG4taG9sbG93MiB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICNGQUZCRkQgMCUsICNFREVERUQgMTAwJSk7CiAgICAgICAgfQoKICAgICAgICAuYnRuLWhvbGxvdzphY3RpdmUsCiAgICAgICAgLmJ0bi1ob2xsb3cyOmFjdGl2ZSB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICNFQkVERjEgMCUsICNEREREREQgMTAwJSk7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDBweCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7CiAgICAgICAgfQoKICAgICAgICAuYnRuLWZpbGxlZCB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMjIuNmRlZywgI0ZGNzExNiAyLjk3JSwgI0ZCOUU0OCAxMDUuMzElKTsKICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCAxNHB4IHJnYmEoMjU1LCAxMjIsIDAsIDAuMzUpLCAwcHggMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMTQpOwogICAgICAgIH0KCiAgICAgICAgLmJ0bi1maWxsZWQ6YWN0aXZlIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEyMi42ZGVnLCByZ2JhKDI1NSwgMTEwLCAyMCwgMC43NzQpIDIuOTclLCAjZmY5ZjQ1IDEwNS4zMSUpOwogICAgICAgICAgICBib3gtc2hhZG93OiAwcHggMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCBpbnNldCAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpOwogICAgICAgIH0KCiAgICAgICAgLmJ0bi1maWxsZWQyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEyMi42ZGVnLCAjMzkzOTM5IDIuOTclLCAjMjYxNjE2IDEwNS4zMSUpOwogICAgICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDE0cHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjE0KTsKICAgICAgICB9CgogICAgICAgIC5idG4tZmlsbGVkMjphY3RpdmUgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTIyLjZkZWcsICMzOTM5MzkgMi45NyUsICMyNjE2MTYgMTA1LjMxJSk7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAxcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4yNSksIGluc2V0IDBweCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7CiAgICAgICAgfQoKICAgICAgICAuYnRuLXRleHQgewogICAgICAgICAgICBmb250LWZhbWlseTogZ2lscm95OwogICAgICAgICAgICBmb250LXNpemU6IDE4cHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDE3NCwgMTc0LCAxNzQsIDEpOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgfQoKICAgICAgICAuYnRuLWhvbGxvdzI+LmJ0bi10ZXh0IHsKICAgICAgICAgICAgY29sb3I6IHJnYmEoMzksIDM5LCAzOSwgMSk7CiAgICAgICAgfQoKICAgICAgICAuYnRuLWZpbGxlZD4uYnRuLXRleHQgewogICAgICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAxKTsKICAgICAgICB9CgogICAgICAgIC5idG4tZmlsbGVkMj4uYnRuLXRleHQgewogICAgICAgICAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAxKTsKICAgICAgICB9CgogICAgICAgIC8qINGH0LXQuiDQsdC+0LrRgdGLINC4INC/0YDQvtGH0LXQtSAqLwogICAgICAgIC5jaGVja2JveC13cmFwcGVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogI0ZGRkZGRjsKICAgICAgICB9CgogICAgICAgIC5mb3JtLWNoZWNrLWlubGluZT5pbnB1dFt0eXBlPSJjaGVja2JveCJdLmZvcm0tY2hlY2staW5wdXQgewogICAgICAgICAgICB3aWR0aDogMTZweDsKICAgICAgICAgICAgaGVpZ2h0OiAxNnB4OwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjQzRDNEM0OwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgfQoKICAgICAgICAuZm9ybS1jaGVjay1pbmxpbmU+aW5wdXRbdHlwZT0iY2hlY2tib3giXS5mb3JtLWNoZWNrLWlucHV0OmNoZWNrZWQgewogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjRkU5NzREOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjQ3OTM0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIi4uL3N2Zy9jaGVja01hcmsuc3ZnIik7CiAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7CiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTBweDsKICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjsKICAgICAgICB9CgogICAgICAgIC5mb3JtLWNoZWNrLWlubGluZT5pbnB1dFt0eXBlPSJjaGVja2JveCJdLmZvcm0tY2hlY2staW5wdXQ6ZGlzYWJsZWQgewogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjRENEQ0RDOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzRDNEM0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIi4uL3N2Zy93aGl0ZV9jaGVja19kaXNhYmxlZC5zdmciKTsKICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAxMHB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjRENEQ0RDOwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tY2hlY2staW5saW5lPmlucHV0W3R5cGU9InJhZGlvIl0uZm9ybS1jaGVjay1pbnB1dCB7CiAgICAgICAgICAgIHdpZHRoOiAxNnB4OwogICAgICAgICAgICBoZWlnaHQ6IDE2cHg7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNDNEM0QzQ7CiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7CiAgICAgICAgfQoKICAgICAgICAuZm9ybS1jaGVjay1pbmxpbmU+aW5wdXRbdHlwZT0icmFkaW8iXS5mb3JtLWNoZWNrLWlucHV0OmNoZWNrZWQgewogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjRkU5NzREOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIi4uL3N2Zy9vcmFuZ2VfY2lyY2xlLnN2ZyIpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDEwcHg7CiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7CiAgICAgICAgfQoKICAgICAgICAuZm9ybS1jaGVjay1pbmxpbmU+aW5wdXRbdHlwZT0icmFkaW8iXS5mb3JtLWNoZWNrLWlucHV0OmRpc2FibGVkIHsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI0RDRENEQzsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0Y0NzkzNDsKICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi9zdmcvd2hpdGVfY2lyY2xlLnN2ZyIpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDEwcHg7CiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQ0RDREM7CiAgICAgICAgfQoKICAgICAgICAuZm9ybS1zd2l0Y2ggLmZvcm0tY2hlY2staW5wdXQgewogICAgICAgICAgICBoZWlnaHQ6IDE3cHg7CiAgICAgICAgICAgIHdpZHRoOiAzMnB4OwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tc3dpdGNoIC5mb3JtLWNoZWNrLWlucHV0IHsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOwogICAgICAgICAgICBvdXRsaW5lOiAwOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE5NiwgMTk2LCAxOTYsIDEpOwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAwIHJnYmEoMCwgMCwgMCwgMCk7CiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNlJTNjY2lyY2xlIHI9JzMnIGZpbGw9J3JnYmEoMjU1LDI1NSwyNTUsMS4wKScvPjwvc3ZnPiIpOwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tc3dpdGNoIC5mb3JtLWNoZWNrLWlucHV0OmZvY3VzIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCJkYXRhOmltYWdlL3N2Zyt4bWwsPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9Jy00IC00IDggOCclM2UlM2NjaXJjbGUgcj0nMycgZmlsbD0ncmdiYSgyNTUsMjU1LDI1NSwxLjApJy8+PC9zdmc+Iik7CiAgICAgICAgfQoKICAgICAgICAuZm9ybS1zd2l0Y2ggLmZvcm0tY2hlY2staW5wdXQ6Y2hlY2tlZCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGNDc5MzQ7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI0ZFOTc0RDsKICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoImRhdGE6aW1hZ2Uvc3ZnK3htbCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nLTQgLTQgOCA4JyUzZSUzY2NpcmNsZSByPSczJyBmaWxsPSdyZ2JhKDI1NSwyNTUsMjU1LDEuMCknLz48L3N2Zz4iKTsKICAgICAgICB9CgogICAgICAgIGxhYmVsLmZvcm0tY2hlY2stbGFiZWwgewogICAgICAgICAgICBmb250LWZhbWlseTogZ2lscm95OwogICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDEyOCwgMTI4LCAxMjgsIDEpOwogICAgICAgICAgICAvKiDQvdC10YHQvtGB0YLRi9C60L7QstC60LAgKi8KICAgICAgICB9CgogICAgICAgIC5saW5rLXdoaXRlIGltZyB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogOHB4OwogICAgICAgIH0KCiAgICAgICAgYS5saW5rLXdoaXRlIHsKICAgICAgICAgICAgY29sb3I6ICNGRkZGRkY7CiAgICAgICAgfQoKICAgICAgICBhLmxpbmstb3JhbmdlIHsKICAgICAgICAgICAgY29sb3I6ICNGRjcxMTY7CiAgICAgICAgfQoKICAgICAgICBhIHsKICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyog0LvQsNC50L0g0Y3QtNC40YLRiyDQuCDQv9GA0L7Rh9C10LUgKi8KICAgICAgICBpbnB1dFt0eXBlPSJlbWFpbCJdLmZvcm0tY29udHJvbCwKICAgICAgICBpbnB1dFt0eXBlPSJwYXNzd29yZCJdLmZvcm0tY29udHJvbCB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGMEYwRjA7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCA0cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBnaWxyb3k7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0M3B4OwogICAgICAgICAgICBib3JkZXI6IDEuNzVweCBzb2xpZCAjRjBGMEYwOwogICAgICAgIH0KCiAgICAgICAgaW5wdXRbdHlwZT0iZW1haWwiXS5mb3JtLWNvbnRyb2wubGluZS1kYW5nZXIgewogICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweCAhaW1wb3J0YW50OwogICAgICAgICAgICBib3JkZXItY29sb3I6ICNERDNBM0EgIWltcG9ydGFudDsKICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTsKICAgICAgICB9CgogICAgICAgIGlucHV0W3R5cGU9ImVtYWlsIl0uZm9ybS1jb250cm9sLmxpbmUtc3VjY2VzcyB7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzc0Q0E2NSAhaW1wb3J0YW50OwogICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweCAhaW1wb3J0YW50OwogICAgICAgICAgICBib3gtc2hhZG93OiBub25lOwogICAgICAgIH0KCiAgICAgICAgaW5wdXRbdHlwZT0icGFzc3dvcmQiXS5mb3JtLWNvbnRyb2wubGluZS1kYW5nZXIgewogICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweCAhaW1wb3J0YW50OwogICAgICAgICAgICBib3JkZXItY29sb3I6ICNERDNBM0EgIWltcG9ydGFudDsKICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTsKICAgICAgICB9CgogICAgICAgIGlucHV0W3R5cGU9InBhc3N3b3JkIl0uZm9ybS1jb250cm9sLmxpbmUtc3VjY2VzcyB7CiAgICAgICAgICAgIGJvcmRlci13aWR0aDogMnB4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzc0Q0E2NSAhaW1wb3J0YW50OwogICAgICAgICAgICBib3gtc2hhZG93OiBub25lOwogICAgICAgIH0KCgoKICAgICAgICAuZm9ybS1sYWJlbC5saW5lLXN1Y2Nlc3MgewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBjb2xvcjogIzc0Q0E2NTsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tbGFiZWwubGluZS1kYW5nZXIgewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBjb2xvcjogI0REM0EzQTsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgIH0KCiAgICAgICAgaW5wdXRbdHlwZT0iZW1haWwiXS5mb3JtLWNvbnRyb2w6Zm9jdXMsCiAgICAgICAgaW5wdXRbdHlwZT0icGFzc3dvcmQiXS5mb3JtLWNvbnRyb2w6Zm9jdXMgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjQ0RERUVBOwogICAgICAgICAgICBib3JkZXI6IDEuNzVweCBzb2xpZCAjMkI2M0FFOwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBib3gtc2hhZG93OiAwcHggNHB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjEpOwogICAgICAgIH0KCiAgICAgICAgaW5wdXRbdHlwZT0icGFzc3dvcmQiXS5mb3JtLWNvbnRyb2wgewogICAgICAgICAgICAtd2Via2l0LXRleHQtc2VjdXJpdHk6IGRpc2M7CiAgICAgICAgICAgIC8qINC/0L7QvNC10L3Rj9GOINCyINCx0YPQtNGD0YnQtdC8ICovCiAgICAgICAgfQoKICAgICAgICAvKiDQtNGA0L7Qv9C00LDRg9C90YsgKi8KICAgICAgICBzZWxlY3QuZm9ybS1zZWxlY3QgewogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIGJvcmRlcjogMDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDsKICAgICAgICAgICAgaGVpZ2h0OiA0MnB4OwogICAgICAgICAgICBmb250LWZhbWlseTogZ2lscm95OwogICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgICAgICBmb250LXNpemU6IDE4cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNjBweDsKICAgICAgICB9CgogICAgICAgIG9wdGlvbiB7CiAgICAgICAgICAgIC8qINGPINC10LHQsNC7ICovCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4OwogICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkOwogICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMzAsIDMwLCAzMCwgMSk7CiAgICAgICAgfQoKICAgICAgICAubGFuZy1pY29uIHsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi9zdmcvbGFuZy5zdmciKTsKICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAyNHB4OwogICAgICAgICAgICBoZWlnaHQ6IDQycHg7CiAgICAgICAgICAgIHdpZHRoOiA0MnB4OwogICAgICAgICAgICB6LWluZGV4OiAxMDsKICAgICAgICB9CgogICAgICAgIC8qINC60L3QvtC/0LrQuCBncHMg0Lgg0LfQsNC60LvQsNC00L7QuiAqLwogICAgICAgIGJ1dHRvbi5idG4uYnRuLWhvbGxvdy5idG4tZ3BzIHsKICAgICAgICAgICAgd2lkdGg6IDQ0cHg7CiAgICAgICAgICAgIGhlaWdodDogNDRweDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMjJweDsKICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDJweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7CiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vc3ZnL2dwcy5zdmciKTsKICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAxOHB4OwogICAgICAgIH0KCiAgICAgICAgYnV0dG9uLmJ0bi5idG4taG9sbG93LmJ0bi1ncHM6YWN0aXZlIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0RERERERDsKICAgICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjI1KTsKICAgICAgICB9CgogICAgICAgIGJ1dHRvbi5idG4uYnRuLWhvbGxvdy5idG4tZmF2b3VyaXRlIHsKICAgICAgICAgICAgd2lkdGg6IDMycHg7CiAgICAgICAgICAgIGhlaWdodDogNDJweDsKICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi9zdmcvZmF2b3VyaXRlLnN2ZyIpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDI1cHg7CiAgICAgICAgfQoKICAgICAgICBidXR0b24uYnRuLmJ0bi1ob2xsb3cuYnRuLWZhdm91cml0ZTphY3RpdmUgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREREREOwogICAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpOwogICAgICAgIH0KCiAgICAgICAgLyog0YLQtdC60YHRgtGLICovCiAgICAgICAgaDMudGV4dC1hdHRlbnRpb24gewogICAgICAgICAgICBmb250LWZhbWlseTogZ2lscm95OwogICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgICAgICBmb250LXNpemU6IDI4cHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgY29sb3I6IHJnYmEoNjUsIDY1LCA2NSwgMSk7CiAgICAgICAgfQoKICAgICAgICBoMy50ZXh0LWhlYWRlciB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBnaWxyb3k7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBjb2xvcjogcmdiYSg2NSwgNjUsIDY1LCAxKTsKICAgICAgICB9CgogICAgICAgIGgzLnRleHQtYm9sZCB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBnaWxyb3k7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBjb2xvcjogcmdiYSg2NSwgNjUsIDY1LCAxKTsKICAgICAgICB9CgogICAgICAgIGgzLnRleHQtY29tbW9uIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDY1LCA2NSwgNjUsIDEpOwogICAgICAgIH0KCiAgICAgICAgLmRhbmdlci1pY29uIHsKICAgICAgICAgICAgd2lkdGg6IDE0cHg7CiAgICAgICAgICAgIGhlaWdodDogMTRweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKCIuLi9zdmcvZGFuZ2VyLnN2ZyIpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDE1cHg7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4OwogICAgICAgIH0KCiAgICAgICAgLnN1Y2Nlc3MtaWNvbiB7CiAgICAgICAgICAgIHdpZHRoOiAxNHB4OwogICAgICAgICAgICBoZWlnaHQ6IDE0cHg7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDdweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKCIuLi9zdmcvc3VjY2Vzcy5zdmciKTsKICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAxNXB4OwogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDsKICAgICAgICB9CgogICAgICAgIC8qINCo0LDQv9C60LAg0LTQu9GPINGN0LrRgNCw0L3QvtCyICovCgoKICAgICAgICAuc2NyZWVuLWhhdCAuYXJyb3ctYmFjayB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgd2lkdGg6IDUwcHg7CiAgICAgICAgICAgIG1hcmdpbjogMXJlbTsKICAgICAgICB9CgogICAgICAgIC5zY3JlZW4taGF0IHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDEuM3JlbTsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDEuM3JlbTsKICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDJyZW0gcmdiKDI0MSwgMjQxLCAyNDEpOwogICAgICAgIH0KCiAgICAgICAgLnNjcmVlbi1oYXQgLm1iLTMgewogICAgICAgICAgICBmbGV4LWdyb3c6IDE7CiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW0gMDsKICAgICAgICB9CgogICAgICAgIC5zY3JlZW4taGF0IC5tYi0zLAogICAgICAgIC5zY3JlZW4taGF0IGgzIHsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OwogICAgICAgIH0KCiAgICAgICAgLmFycm93LWZvcndhcmQgewogICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOwogICAgICAgIH0KCiAgICAgICAgLyog0JrQsNGA0YLQvtGH0LrQsCDRgSDQvNCw0YDRiNGA0YPRgtC+0LwsINC80L7QttC10YIg0L/RgNC40LPQvtC00LjRgtGM0YHRjyDQs9C00LUt0YLQviAqLwoKICAgICAgICAudHJpcC1jYXJkIHsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKCiAgICAgICAgICAgIC8qINCa0LDQuiDQt9Cw0LTQsNGC0Ywg0L7RgtC90L7RiNC10L3QuNC1INGB0YLQvtGA0L7QvT8g0J/RgNC+0LLQtdGA0LjRgtGMISEhICovCiAgICAgICAgICAgIGFzcGVjdC1yYXRpbzogMzIyLzIzMzsKICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7CiAgICAgICAgICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDdweCA5cHggcmdiYSgwLCAwLCAwLCAwLjIpKTsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2JhY2tncm91bmQgewoKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICB6LWluZGV4OiAtNjsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2NvbnRlbnQgewogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwcHggLTY0cHggMzNweCByZ2JhKDAsIDAsIDAsIDAuNTUpOwoKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7CgogICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgIHBhZGRpbmc6IDEycHggMTdweDsKCiAgICAgICAgfQoKICAgICAgICAudHJpcC1jYXJkX19yYXRpbmcgewogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgcmlnaHQ6IDA7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIHdpZHRoOiBmaXQtY29udGVudDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kOwogICAgICAgICAgICBwYWRkaW5nOiAwLjM1cmVtIDAuNnJlbTsKICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMC44cmVtOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYwZjBmOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4IDEycHggMHB4IDEycHg7CiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOwoKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX3JhdGluZ19fbnVtYmVyIHsKICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDAuM3JlbTsKICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4OwogICAgICAgIH0KCiAgICAgICAgLnRyaXAtY2FyZF9fcmF0aW5nX19zdGFycyB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgfQoKICAgICAgICAudHJpcC1jYXJkX19yYXRpbmdfX3N0YXJzIGltZyB7CiAgICAgICAgICAgIGhlaWdodDogOHB4OwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHdpZHRoOiA4cHg7CiAgICAgICAgfQoKICAgICAgICAudHJpcC1jYXJkX190aXRsZSB7CiAgICAgICAgICAgIHdpZHRoOiA3MCU7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2Zvb3RlciB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgICAgICAgICBjb2xvcjogI0YwRjBGMDsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2Zvb3Rlcl9fZmFrZS1idXR0b24gewogICAgICAgICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjRyZW07CiAgICAgICAgICAgIGFzcGVjdC1yYXRpbzogMiAvIDE7CiAgICAgICAgICAgIG1pbi13aWR0aDogNTBweDsKICAgICAgICAgICAgbWluLWhlaWdodDogMjVweDsKCiAgICAgICAgICAgIGJvcmRlcjogMDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgfQoKICAgICAgICAudHJpcC1jYXJkX19mb290ZXJfX2Zha2UtYnV0dG9uIGltZyB7CiAgICAgICAgICAgIGhlaWdodDogMTBweDsKICAgICAgICAgICAgd2lkdGg6IDEzcHg7CiAgICAgICAgfQoKICAgICAgICAuc3BhY2VyIHsKICAgICAgICAgICAgZmxleC1ncm93OiAxOwogICAgICAgIH0KCiAgICAgICAgLnRyaXAtY2FyZF9fZm9vdGVyX19sZW5ndGggewogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2Zvb3Rlcl9fbGVuZ3RoIGltZyB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbTsKICAgICAgICB9CgogICAgICAgIC50cmlwLWNhcmRfX2Zvb3Rlcl9fdGltZSB7CiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwLjVyZW07CiAgICAgICAgfQoKCiAgICAgICAgLyog0K8g0L/QvtC/0YvRgtCw0LvRgdGPINGB0LTQtdC70LDRgtGMINC60YDQsNGB0LjQstGL0LkgKi8KICAgICAgICAuZHJvcGRvd24taWNvbiB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgaGVpZ2h0OiA0MnB4OwogICAgICAgICAgICB3aWR0aDogNDJweDsKICAgICAgICAgICAgei1pbmRleDogMTA7CiAgICAgICAgICAgIHBhZGRpbmc6IDAuNnJlbTsKICAgICAgICB9CgogICAgICAgIC5kcm9wZG93biB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoOwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0cmV0Y2g7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwLjc1cmVtOwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tc2VsZWN0LXVwZGF0ZWQgewogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICB6LWluZGV4OiAxOwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4OwogICAgICAgIH0KCiAgICAgICAgLmRyb3Bkb3duLXRpdGxlIHsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNjBweDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIH0KCiAgICAgICAgLmRyb3Bkb3duIG9wdGlvbiB7CiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveSwgc2Fucy1zZXJpZjsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIH0KCiAgICAgICAgLyogc29ycnkgKi8KICAgICAgICAjc3VjY2VzcyBkaXYgewogICAgICAgICAgICBmb250LWZhbWlseTogZ2lscm95OwogICAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c3R5bGU+CiAgICAgICAgLm5hdi1iYXIgewogICAgICAgICAgICBoZWlnaHQ6IDE0OHB4OwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgICBib3R0b206IDA7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIHotaW5kZXg6IDM7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4IDEycHggMHB4IDBweDsKICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IC0ycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4wOCk7CgogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDsKICAgICAgICB9CgogICAgICAgIC5uYXYtYmFyX19lbGVtZW50IHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGFzcGVjdC1yYXRpbzogMS8xOwogICAgICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogICAgICAgIH0KCiAgICAgICAgLm5hdi1iYXJfX2VsZW1lbnRfX2ljb24gewogICAgICAgICAgICB3aWR0aDogMjRweDsKICAgICAgICAgICAgaGVpZ2h0OiAyNHB4OwogICAgICAgIH0KCiAgICAgICAgLm5hdi1iYXJfX2VsZW1lbnRfX3RpdGxlIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsOwogICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsOwogICAgICAgICAgICBmb250LXNpemU6IDhweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDhweDsKICAgICAgICAgICAgY29sb3I6ICNBRUFFQUU7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTsKICAgICAgICB9CgogICAgICAgIC5uYXYtYmFyX19lbGVtZW50LmFjdGl2ZSAubmF2LWJhcl9fZWxlbWVudF9fdGl0bGUgewogICAgICAgICAgICBjb2xvcjogI0ZGNzExNjsKCiAgICAgICAgfQoKICAgICAgICAubmF2LWJhciB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAgICAgfQoKICAgICAgICAuZG91YmxlLWNpcmNsZSB7CiAgICAgICAgICAgIHdpZHRoOiA2N3B4OwogICAgICAgICAgICBoZWlnaHQ6IDY3cHg7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybCgiLi4vLi4vdWkta2l0L3N2Zy9kb3VibGVfY2lyY2xlLnN2ZyIpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDY3cHg7CiAgICAgICAgfQoKICAgICAgICBwIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGdpbHJveTsKICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsOwogICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsOwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIGNvbG9yOiAjQUVBRUFFOwogICAgICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgICAgIHRleHQtYWxpZ246IGp1c3RpZnk7CiAgICAgICAgfQoKICAgICAgICAuc3VidGl0bGVzLXdyYXBwZXIgewogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgIGJvdHRvbTogMTYwcHg7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIHotaW5kZXg6IDQ7CiAgICAgICAgfQoKICAgICAgICAuc3VidGl0bGVzIHsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50OwogICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTIyLjZkZWcsICMzOTM5MzkgMi45NyUsICMyNjE2MTYgMTA1LjMxJSk7CiAgICAgICAgICAgIGZpbHRlcjogb3BhY2l0eSg3MCUpOwogICAgICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDE0cHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjE0KTsKICAgICAgICAgICAgei1pbmRleDogNDsKICAgICAgICB9CgogICAgICAgIC5zY3JlZW4taGF0IHsKICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c3R5bGU+CiAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHA6Ly9mb250cy5jZG5mb250cy5jb20vY3NzL211bGxlci1uYXJyb3cnKTsKCiAgICAgICAgLnRleHQtaGVhZGVyLAogICAgICAgICNzdWJ0aXRsZSB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnTXVsbGVyJywgc2Fucy1zZXJpZiAhaW1wb3J0YW50OwogICAgICAgIH0KICAgIDwvc3R5bGU+CgoKPC9oZWFkPgoKPGJvZHkgc3R5bGU9Im1hcmdpbjogMDsgb3ZlcmZsb3c6IGhpZGRlbjsgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IHdpZHRoOiAxMDAlOyI+CgogICAgPGRpdiBjbGFzcz0ic2NyZWVuLWhhdCI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGFycm93LWJhY2siPgogICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBmaWxsPSJjdXJyZW50Q29sb3IiIGNsYXNzPSJiaSBiaS1hcnJvdy1sZWZ0IgogICAgICAgICAgICAgICAgdmlld0JveD0iMCAwIDE2IDE2Ij4KICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgICAgICBkPSJNMTUgOGEuNS41IDAgMCAwLS41LS41SDIuNzA3bDMuMTQ3LTMuMTQ2YS41LjUgMCAxIDAtLjcwOC0uNzA4bC00IDRhLjUuNSAwIDAgMCAwIC43MDhsNCA0YS41LjUgMCAwIDAgLjcwOC0uNzA4TDIuNzA3IDguNUgxNC41QS41LjUgMCAwIDAgMTUgOHoiIC8+CiAgICAgICAgICAgIDwvc3ZnPjwvYnV0dG9uPgogICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi1ib3R0b206MnJlbTsgd2lkdGg6IDEwMCU7IGRpc3BsYXk6ZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Ij4KICAgICAgICAgICAgPGgzIGNsYXNzPSJ0ZXh0LWhlYWRlciI+CiAgICAgICAgICAgICAgICDQrdC60L7QvdC+0LzQuNGH0LXRgdC60LjQuSDRhNCw0LrRg9C70YzRgtC10YIg0K/QoNCT0KMKICAgICAgICAgICAgPC9oMz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGZvb3RlciBjbGFzcz0ibmF2LWJhciI+CiAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IGFsaWduLWl0ZW1zOmNlbnRlcjsiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkb3VibGUtY2lyY2xlIiBvbmNsaWNrPSJsb2NhdGlvbi5ocmVmPScjJyI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCgogICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4OyB3aWR0aDogMTAwJTsgcGFkZGluZzogMCAwLjc1cmVtOyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsiIGNsYXNzPSJzdWJ0aXRsZXMtd3JhcHBlciI+CgogICAgICAgIDxkaXYgaWQ9InN1YnRpdGxlcyI+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmc6IDFyZW07IGRpc3BsYXk6ZmxleDsgd2lkdGg6IGNhbGMoMTAwJSAtIDRyZW0pOyIgY2xhc3M9InN1YnRpdGxlcyI+CiAgICAgICAgICAgICAgICA8cCBpZD0ic3VidGl0bGUiIHN0eWxlPSJ0ZXh0LWFsaWduOmxlZnQ7Ij48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2PgoKICAgIDxzY3JpcHQ+CgoKICAgICAgICB2YXIgc3VidGl0bGVzID0gWwoKCiAgICAgICAgICAgIFsn0K3QutC+0L3QvtC80LjRh9C10YHQutC40Lkg0YTQsNC60YPQu9GM0YLQtdGCLCDQvtCx0YDQsNC30L7QstCw0L3QvdGL0Lkg0LIg0YHQtdC90YLRj9Cx0YDQtSAxOTcxINCz0L7QtNCwLCcsIDNdLAogICAgICAgICAgICBbJ9GP0LLQu9GP0LXRgtGB0Y8g0LIg0L3QsNGB0YLQvtGP0YnQtdC1INCy0YDQtdC80Y8g0L7QtNC90LjQvCDQuNC3INCy0LDQttC90YvRhSDRhtC10L3RgtGA0L7QsiDQv9C+INC/0L7QtNCz0L7RgtC+0LLQutC1JywgNl0sCiAgICAgICAgICAgIFsn0YHQv9C10YbQuNCw0LvQuNGB0YLQvtCyINCy0YvRgdGI0LXQuSDQutCy0LDQu9C40YTQuNC60LDRhtC40Lgg0LTQu9GPINC+0YLRgNCw0YHQu9C10Lkg0L3QsNGA0L7QtNC90L7Qs9C+INGF0L7Qt9GP0LnRgdGC0LLQsCDRgNC10LPQuNC+0L3QsC4gJywgMTBdLAogICAgICAgICAgICBbJ9CSINC90LDRgdGC0L7Rj9GJ0LXQtSDQstGA0LXQvNGPINGE0LDQutGD0LvRjNGC0LXRgiDQvtGB0YPRidC10YHRgtCy0LvRj9C10YIg0L/QvtC00LPQvtGC0L7QstC60YMg0LHQsNC60LDQu9Cw0LLRgNC+0LIg0L/QviDRgdC70LXQtNGD0Y7RidC40Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjRj9C8OiDRjdC60L7QvdC+0LzQuNC60LAsJywgMTRdLAogICAgICAgICAgICBbJ9C80LXQvdC10LTQttC80LXQvdGCLCDQs9C+0YHRg9C00LDRgNGB0YLQstC10L3QvdC+0LUg0Lgg0LzRg9C90LjRhtC40L/QsNC70YzQvdC+0LUg0YPQv9GA0LDQstC70LXQvdC40LUnLCAxOV0sCiAgICAgICAgICAgIFsn0JrRgNC+0LzQtSDRgtC+0LPQviwg0YTQsNC60YPQu9GM0YLQtdGCINC+0YHRg9GJ0LXRgdGC0LLQu9GP0LXRgiDQv9C+0LTQs9C+0YLQvtCy0LrRgyDQvNCw0LPQuNGB0YLRgNC+0LIg0Lgg0LDRgdC/0LjRgNCw0L3RgtC+0LIuJywgMjNdLAogICAgICAgICAgICBbJ9CSINGB0L7RgdGC0LDQsiDRhNCw0LrRg9C70YzRgtC10YLQsCDQstGF0L7QtNGP0YIg0YfQtdGC0YvRgNC1INC60LDRhNC10LTRgNGLOicsIDI4XSwKICAgICAgICAgICAgWyfQutCw0YTQtdC00YDQsCDQsdGD0YXQs9Cw0LvRgtC10YDRgdC60L7Qs9C+INGD0YfQtdGC0LAsINCw0L3QsNC70LjQt9CwINC4INCw0YPQtNC40YLQsCcsIDMyXSwKICAgICAgICAgICAgWyfQutCw0YTQtdC00YDQsCDRhNC40L3QsNC90YHQvtCyINC4INC60YDQtdC00LjRgtCwJywgMzZdLAogICAgICAgICAgICBbJ9C60LDRhNC10LTRgNCwINC80LjRgNC+0LLQvtC5INGN0LrQvtC90L7QvNC40LrQuCDQuCDRgdGC0LDRgtC40YHRgtC40LrQuCcsIDQzXSwKICAgICAgICAgICAgWyfQutCw0YTQtdC00YDQsCDRg9C/0YDQsNCy0LvQtdC90LjRjyDQuCDQv9GA0LXQtNC/0YDQuNC90LjQvNCw0YLQtdC70YzRgdGC0LLQsCcsIDQ5XSwKICAgICAgICAgICAgWyfQodGC0YPQtNC10L3RgtGLINGE0LDQutGD0LvRjNGC0LXRgtCwINCw0LrRgtC40LLQvdC+INGD0YfQsNGB0YLQstGD0Y7RgiDQsiDQvtCx0YnQtdGB0YLQstC10L3QvdC+0Lkg0LbQuNC30L3QuCDQs9C+0YDQvtC00LAg0Lgg0YHRgtGA0LDQvdGLLCDQvNC10YDQvtC/0YDQuNGP0YLQuNGP0YUg0KHRgtGD0LTQtdC90YfQtdGB0LrQvtCz0L4gJywgNTJdLAogICAgICAgICAgICBbJ9C90LDRg9GH0L3QvtCz0L4g0L7QsdGJ0LXRgdGC0LLQsCDQrdC60L7QvdC+0LzQuNGH0LXRgdC60L7Qs9C+INGE0LDQutGD0LvRjNGC0LXRgtCwINC4INC60LXQudGBLdC60LvRg9Cx0LAg0K/RgNCT0KMsINC/0YDQvtCy0L7QtNGP0YIg0YHQvtCx0YHRgtCy0LXQvdC90YvQtSDQvdCw0YPRh9C90YvQtSDQuNGB0YHQu9C10LTQvtCy0LDQvdC40Y8nLCA1N10sCiAgICAgICAgICAgIFsn0Lgg0YPRh9Cw0YHRgtCy0YPRjtGCINCyINC90LDRg9GH0L3Ri9GFINC60L7QvdC60YPRgNGB0LDRhSwg0LrQvtC90YTQtdGA0LXQvdGG0LjRj9GFLCDRgdC10LzQuNC90LDRgNCw0YUsINC60YDRg9Cz0LvRi9GFINGB0YLQvtC70LDRhSwg0L/RgNC+0YXQvtC00Y/RgiDRgdGC0LDQttC40YDQvtCy0LrQuCDQuCDRg9GH0LXQsdC90L4tJywgNjNdLAogICAgICAgICAgICBbJyDQv9GA0L7QuNC30LLQvtC00YHRgtCy0LXQvdC90YvQtSDQv9GA0LDQutGC0LjQutC4INC90LAg0LLQtdC00YPRidC40YUg0L/RgNC10LTQv9GA0LjRj9GC0LjRj9GFINCz0L7RgNC+0LTQsCDQuCDQvtCx0LvQsNGB0YLQuCwg0YPRh9Cw0YHRgtCy0YPRjtGCINCyINC80LXQttC00YPQvdCw0YDQvtC00L3Ri9GFINC/0YDQvtCz0YDQsNC80LzQsNGFICcsIDY4XSwKICAgICAgICAgICAgWyfQsNC60LDQtNC10LzQuNGH0LXRgdC60L7QuSDQvNC+0LHQuNC70YzQvdC+0YHRgtC4LicsIDcyXSwKCiAgICAgICAgXTsKICAgICAgICB2YXIgaWR4ID0gMDsKICAgICAgICB2YXIgbWVkaWE7CiAgICAgICAgdmFyIHRpbWVyX3N0YXJ0OwogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXVzZXVtJykucGxheSgpOwogICAgICAgICAgICB0aW1lcl9zdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICBzID0gc3VidGl0bGVzW2lkeF1bMF07CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJ0aXRsZScpLmlubmVySFRNTCA9IHM7CiAgICAgICAgICAgIC8vIG5leHRfdGV4dCgpOwogICAgICAgIH0sIDEwMDApOwoKICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgIHdoaWxlIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRpbWVyX3N0YXJ0ID49IHN1YnRpdGxlc1tpZHhdWzFdICogMTAwMCkgewogICAgICAgICAgICAgICAgaWR4Kys7CiAgICAgICAgICAgICAgICBpZiAoaWR4ID49IHN1YnRpdGxlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBpZHggPSBzdWJ0aXRsZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJ0aXRsZXMnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcyA9IHN1YnRpdGxlc1tpZHhdWzBdOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1YnRpdGxlJykuaW5uZXJIVE1MID0gczsKICAgICAgICAgICAgfQogICAgICAgIH0sIDIwMCk7CgogICAgPC9zY3JpcHQ+CjwvYm9keT4KCjwvaHRtbD4=";
      mywebview.loadData(base64wvhtml, "text/html", "base64");
      mywebview.setBackgroundColor(0x00000000);
    } else {
      Log.e("ERORRR!!! --> ", "null");
      Log.e("ERORRR!!! --> ", "null");
      Log.e("ERORRR!!! --> ", "null");
      Log.e("ERORRR!!! --> ", "null");
      Log.e("ERORRR!!! --> ", "null");
    }


    surfaceView = findViewById(this.R.getIdentifier("surfaceview", "id", getApplicationContext().getPackageName()));
    displayRotationHelper = new DisplayRotationHelper(/*context=*/ this); 

    // Set up touch listener.
    tapHelper = new TapHelper(/*context=*/ this);
    mywebview.setOnTouchListener(tapHelper);

    // Set up renderer.
    render = new SampleRender(surfaceView, this, getAssets());

    installRequested = false;

    depthSettings.onCreate(this);
    instantPlacementSettings.onCreate(this);
    ImageButton settingsButton = findViewById(this.R.getIdentifier("settings_button", "id",  getApplicationContext().getPackageName()));
    settingsButton.setOnClickListener(
        new View.OnClickListener() {
          @Override
          public void onClick(View v) {
            PopupMenu popup = new PopupMenu(HelloArActivity.this, v);
            popup.setOnMenuItemClickListener(HelloArActivity.this::settingsMenuClick);
            popup.inflate(HelloArActivity.this.R.getIdentifier("settings_menu", "menu", getApplicationContext().getPackageName()));
            popup.show();
          }
        });
  }

  /** Menu button to launch feature specific settings. */
  protected boolean settingsMenuClick(MenuItem item) {
    if (item.getItemId() == this.R.getIdentifier("depth_settings", "id", getApplicationContext().getPackageName())) {
      launchDepthSettingsMenuDialog();
      return true;
    } else if (item.getItemId() == this.R.getIdentifier("instant_placement_settings", "id", getApplicationContext().getPackageName())) {
      launchInstantPlacementSettingsMenuDialog();
      return true;
    }
    return false;
  }

  @Override
  protected void onDestroy() {
    if (session != null) {
      // Explicitly close ARCore Session to release native resources.
      // Review the API reference for important considerations before calling close() in apps with
      // more complicated lifecycle requirements:
      // https://developers.google.com/ar/reference/java/arcore/reference/com/google/ar/core/Session#close()
      session.close();
      session = null;
    }

    super.onDestroy();
  }

  @Override
  protected void onResume() {
    super.onResume();

    if (session == null) {
      Exception exception = null;
      String message = null;
      try {
        switch (ArCoreApk.getInstance().requestInstall(this, !installRequested)) {
          case INSTALL_REQUESTED:
            installRequested = true;
            return;
          case INSTALLED:
            break;
        }

        // ARCore requires camera permissions to operate. If we did not yet obtain runtime
        // permission on Android M and above, now is a good time to ask the user for it.
        if (!CameraPermissionHelper.hasCameraPermission(this)) {
          CameraPermissionHelper.requestCameraPermission(this);
          return;
        }

        // Create the session.
        session = new Session(/* context= */ this);
      } catch (UnavailableArcoreNotInstalledException
          | UnavailableUserDeclinedInstallationException e) {
        message = "Please install ARCore";
        exception = e;
      } catch (UnavailableApkTooOldException e) {
        message = "Please update ARCore";
        exception = e;
      } catch (UnavailableSdkTooOldException e) {
        message = "Please update this app";
        exception = e;
      } catch (UnavailableDeviceNotCompatibleException e) {
        message = "This device does not support AR";
        exception = e;
      } catch (Exception e) {
        message = "Failed to create AR session";
        exception = e;
      }

      if (message != null) {
        messageSnackbarHelper.showError(this, message);
        Log.e(TAG, "Exception creating session", exception);
        return;
      }
    }

    // Note that order matters - see the note in onPause(), the reverse applies here.
    try {
      configureSession();
      // To record a live camera session for later playback, call
      // `session.startRecording(recordingConfig)` at anytime. To playback a previously recorded AR
      // session instead of using the live camera feed, call
      // `session.setPlaybackDatasetUri(Uri)` before calling `session.resume()`. To
      // learn more about recording and playback, see:
      // https://developers.google.com/ar/develop/java/recording-and-playback
      session.resume();
    } catch (CameraNotAvailableException e) {
      messageSnackbarHelper.showError(this, "Camera not available. Try restarting the app.");
      session = null;
      return;
    }

    surfaceView.onResume();
    displayRotationHelper.onResume();
  }

  @Override
  public void onPause() {
    super.onPause();
    if (session != null) {
      // Note that the order matters - GLSurfaceView is paused first so that it does not try
      // to query the session. If Session is paused before GLSurfaceView, GLSurfaceView may
      // still call session.update() and get a SessionPausedException.
      displayRotationHelper.onPause();
      surfaceView.onPause();
      session.pause();
    }
  }

  @Override
  public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] results) {
    super.onRequestPermissionsResult(requestCode, permissions, results);
    if (!CameraPermissionHelper.hasCameraPermission(this)) {
      // Use toast instead of snackbar here since the activity will exit.
      Toast.makeText(this, "Camera permission is needed to run this application", Toast.LENGTH_LONG)
          .show();
      if (!CameraPermissionHelper.shouldShowRequestPermissionRationale(this)) {
        // Permission denied with checking "Do not ask again".
        CameraPermissionHelper.launchPermissionSettings(this);
      }
      finish();
    }
  }

  @Override
  public void onWindowFocusChanged(boolean hasFocus) {
    super.onWindowFocusChanged(hasFocus);
    FullScreenHelper.setFullScreenOnWindowFocusChanged(this, hasFocus);
  }

  @Override
  public void onSurfaceCreated(SampleRender render) {
    // Prepare the rendering objects. This involves reading shaders and 3D model files, so may throw
    // an IOException.
    try {
      planeRenderer = new PlaneRenderer(render);
      backgroundRenderer = new BackgroundRenderer(render);
      virtualSceneFramebuffer = new Framebuffer(render, /*width=*/ 1, /*height=*/ 1);

      cubemapFilter =
          new SpecularCubemapFilter(
              render, CUBEMAP_RESOLUTION, CUBEMAP_NUMBER_OF_IMPORTANCE_SAMPLES);
      // Load DFG lookup table for environmental lighting
      dfgTexture =
          new Texture(
              render,
              Texture.Target.TEXTURE_2D,
              Texture.WrapMode.CLAMP_TO_EDGE,
              /*useMipmaps=*/ false);
      // The dfg.raw file is a raw half-float texture with two channels.
      final int dfgResolution = 64;
      final int dfgChannels = 2;
      final int halfFloatSize = 2;

      ByteBuffer buffer =
          ByteBuffer.allocateDirect(dfgResolution * dfgResolution * dfgChannels * halfFloatSize);
      try (InputStream is = getAssets().open("models/dfg.raw")) {
        is.read(buffer.array());
      }
      // SampleRender abstraction leaks here.
      GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, dfgTexture.getTextureId());
      GLError.maybeThrowGLException("Failed to bind DFG texture", "glBindTexture");
      GLES30.glTexImage2D(
          GLES30.GL_TEXTURE_2D,
          /*level=*/ 0,
          GLES30.GL_RG16F,
          /*width=*/ dfgResolution,
          /*height=*/ dfgResolution,
          /*border=*/ 0,
          GLES30.GL_RG,
          GLES30.GL_HALF_FLOAT,
          buffer);
      GLError.maybeThrowGLException("Failed to populate DFG texture", "glTexImage2D");

      // Point cloud
      pointCloudShader =
          Shader.createFromAssets(
                  render, "shaders/point_cloud.vert", "shaders/point_cloud.frag", /*defines=*/ null)
              .setVec4(
                  "u_Color", new float[] {31.0f / 255.0f, 188.0f / 255.0f, 210.0f / 255.0f, 1.0f})
              .setFloat("u_PointSize", 5.0f);
      // four entries per vertex: X, Y, Z, confidence
      pointCloudVertexBuffer =
          new VertexBuffer(render, /*numberOfEntriesPerVertex=*/ 4, /*entries=*/ null);
      final VertexBuffer[] pointCloudVertexBuffers = {pointCloudVertexBuffer};
      pointCloudMesh =
          new Mesh(
              render, Mesh.PrimitiveMode.POINTS, /*indexBuffer=*/ null, pointCloudVertexBuffers);

      // Virtual object to render (ARCore pawn)
      virtualObjectAlbedoTexture =
          Texture.createFromAsset(
              render,
              "models/pawn_albedo.png",
              Texture.WrapMode.CLAMP_TO_EDGE,
              Texture.ColorFormat.SRGB);
      virtualObjectAlbedoInstantPlacementTexture =
          Texture.createFromAsset(
              render,
              "models/pawn_albedo_instant_placement.png",
              Texture.WrapMode.CLAMP_TO_EDGE,
              Texture.ColorFormat.SRGB);
      Texture virtualObjectPbrTexture =
          Texture.createFromAsset(
              render,
              "models/pawn_roughness_metallic_ao.png",
              Texture.WrapMode.CLAMP_TO_EDGE,
              Texture.ColorFormat.LINEAR);

      virtualObjectMesh = Mesh.createFromAsset(render, "models/pawn.obj");
      virtualObjectShader =
          Shader.createFromAssets(
                  render,
                  "shaders/environmental_hdr.vert",
                  "shaders/environmental_hdr.frag",
                  /*defines=*/ new HashMap<String, String>() {
                    {
                      put(
                          "NUMBER_OF_MIPMAP_LEVELS",
                          Integer.toString(cubemapFilter.getNumberOfMipmapLevels()));
                    }
                  })
              .setTexture("u_AlbedoTexture", virtualObjectAlbedoTexture)
              .setTexture("u_RoughnessMetallicAmbientOcclusionTexture", virtualObjectPbrTexture)
              .setTexture("u_Cubemap", cubemapFilter.getFilteredCubemapTexture());
              //.setTexture("u_DfgTexture", dfgTexture);
    } catch (IOException e) {
      Log.e(TAG, "Failed to read a required asset file", e);
      messageSnackbarHelper.showError(this, "Failed to read a required asset file: " + e);
    }
  }

  @Override
  public void onSurfaceChanged(SampleRender render, int width, int height) {
    displayRotationHelper.onSurfaceChanged(width, height);
    virtualSceneFramebuffer.resize(width, height);
  }

  @Override
  public void onDrawFrame(SampleRender render) {
    if (session == null) {
      return;
    }

    // Texture names should only be set once on a GL thread unless they change. This is done during
    // onDrawFrame rather than onSurfaceCreated since the session is not guaranteed to have been
    // initialized during the execution of onSurfaceCreated.
    if (!hasSetTextureNames) {
      session.setCameraTextureNames(
          new int[] {backgroundRenderer.getCameraColorTexture().getTextureId()});
      hasSetTextureNames = true;
    }

    // -- Update per-frame state

    // Notify ARCore session that the view size changed so that the perspective matrix and
    // the video background can be properly adjusted.
    displayRotationHelper.updateSessionIfNeeded(session);

    // Obtain the current frame from ARSession. When the configuration is set to
    // UpdateMode.BLOCKING (it is by default), this will throttle the rendering to the
    // camera framerate.
    Frame frame;
    try {
      frame = session.update();
    } catch (CameraNotAvailableException e) {
      Log.e(TAG, "Camera not available during onDrawFrame", e);
      messageSnackbarHelper.showError(this, "Camera not available. Try restarting the app.");
      return;
    }
    Camera camera = frame.getCamera();

    // Update BackgroundRenderer state to match the depth settings.
    try {
      backgroundRenderer.setUseDepthVisualization(
          render, depthSettings.depthColorVisualizationEnabled());
      backgroundRenderer.setUseOcclusion(render, depthSettings.useDepthForOcclusion());
    } catch (IOException e) {
      Log.e(TAG, "Failed to read a required asset file", e);
      messageSnackbarHelper.showError(this, "Failed to read a required asset file: " + e);
      return;
    }
    // BackgroundRenderer.updateDisplayGeometry must be called every frame to update the coordinates
    // used to draw the background camera image.
    backgroundRenderer.updateDisplayGeometry(frame);

    if (camera.getTrackingState() == TrackingState.TRACKING
        && (depthSettings.useDepthForOcclusion()
            || depthSettings.depthColorVisualizationEnabled())) {
      try (Image depthImage = frame.acquireDepthImage()) {
        backgroundRenderer.updateCameraDepthTexture(depthImage);
      } catch (NotYetAvailableException e) {
        // This normally means that depth data is not available yet. This is normal so we will not
        // spam the logcat with this.
      }
    }

    // Handle one tap per frame.
    handleTap(frame, camera);

    // Keep the screen unlocked while tracking, but allow it to lock when tracking stops.
    trackingStateHelper.updateKeepScreenOnFlag(camera.getTrackingState());

    // Show a message based on whether tracking has failed, if planes are detected, and if the user
    // has placed any objects.
    String message = null;
    if (camera.getTrackingState() == TrackingState.PAUSED) {
      if (camera.getTrackingFailureReason() == TrackingFailureReason.NONE) {
        message = SEARCHING_PLANE_MESSAGE;
      } else {
        message = TrackingStateHelper.getTrackingFailureReasonString(camera);
      }
    } else if (hasTrackingPlane()) {
      if (wrappedAnchors.isEmpty()) {
        message = WAITING_FOR_TAP_MESSAGE;
      }
    } else {
      message = SEARCHING_PLANE_MESSAGE;
    }
    if (message == null) {
      messageSnackbarHelper.hide(this);
    } else {
      messageSnackbarHelper.showMessage(this, message);
    }

    // -- Draw background

    if (frame.getTimestamp() != 0) {
      // Suppress rendering if the camera did not produce the first frame yet. This is to avoid
      // drawing possible leftover data from previous sessions if the texture is reused.
      backgroundRenderer.drawBackground(render);
    }

    // If not tracking, don't draw 3D objects.
    if (camera.getTrackingState() == TrackingState.PAUSED) {
      return;
    }

    // -- Draw non-occluded virtual objects (planes, point cloud)

    // Get projection matrix.
    camera.getProjectionMatrix(projectionMatrix, 0, Z_NEAR, Z_FAR);

    // Get camera matrix and draw.
    camera.getViewMatrix(viewMatrix, 0);

    // Visualize tracked points.
    // Use try-with-resources to automatically release the point cloud.
    try (PointCloud pointCloud = frame.acquirePointCloud()) {
      if (pointCloud.getTimestamp() > lastPointCloudTimestamp) {
        pointCloudVertexBuffer.set(pointCloud.getPoints());
        lastPointCloudTimestamp = pointCloud.getTimestamp();
      }
      Matrix.multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, viewMatrix, 0);
      pointCloudShader.setMat4("u_ModelViewProjection", modelViewProjectionMatrix);
      render.draw(pointCloudMesh, pointCloudShader);
    }

    // Visualize planes.
    /*planeRenderer.drawPlanes(
        render,
        session.getAllTrackables(Plane.class),
        camera.getDisplayOrientedPose(),
        projectionMatrix);*/

    // -- Draw occluded virtual objects

    // Update lighting parameters in the shader
    updateLightEstimation(frame.getLightEstimate(), viewMatrix);

    // Visualize anchors created by touch.
    render.clear(virtualSceneFramebuffer, 0f, 0f, 0f, 0f);
    for (WrappedAnchor wrappedAnchor : wrappedAnchors) {
      Anchor anchor = wrappedAnchor.getAnchor();
      Trackable trackable = wrappedAnchor.getTrackable();
      if (anchor.getTrackingState() != TrackingState.TRACKING) {
        continue;
      }

      // Get the current pose of an Anchor in world space. The Anchor pose is updated
      // during calls to session.update() as ARCore refines its estimate of the world.
      anchor.getPose().toMatrix(modelMatrix, 0);

      // Calculate model/view/projection matrices
      Matrix.multiplyMM(modelViewMatrix, 0, viewMatrix, 0, modelMatrix, 0);
      Matrix.multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, modelViewMatrix, 0);

      // Update shader properties and draw
      virtualObjectShader.setMat4("u_ModelView", modelViewMatrix);
      virtualObjectShader.setMat4("u_ModelViewProjection", modelViewProjectionMatrix);

      if (trackable instanceof InstantPlacementPoint
          && ((InstantPlacementPoint) trackable).getTrackingMethod()
              == InstantPlacementPoint.TrackingMethod.SCREENSPACE_WITH_APPROXIMATE_DISTANCE) {
        virtualObjectShader.setTexture(
            "u_AlbedoTexture", virtualObjectAlbedoInstantPlacementTexture);
      } else {
        virtualObjectShader.setTexture("u_AlbedoTexture", virtualObjectAlbedoTexture);
      }

      render.draw(virtualObjectMesh, virtualObjectShader, virtualSceneFramebuffer);
    }

    // Compose the virtual scene with the background.
    backgroundRenderer.drawVirtualScene(render, virtualSceneFramebuffer, Z_NEAR, Z_FAR);
  }

  // Handle only one tap per frame, as taps are usually low frequency compared to frame rate.
  private void handleTap(Frame frame, Camera camera) {
    MotionEvent tap = tapHelper.poll();
    if (tap != null && camera.getTrackingState() == TrackingState.TRACKING) {
      List<HitResult> hitResultList;
      if (instantPlacementSettings.isInstantPlacementEnabled()) {
        hitResultList =
            frame.hitTestInstantPlacement(tap.getX(), tap.getY(), APPROXIMATE_DISTANCE_METERS);
      } else {
        hitResultList = frame.hitTest(tap);
      }
      for (HitResult hit : hitResultList) {
        // If any plane, Oriented Point, or Instant Placement Point was hit, create an anchor.
        Trackable trackable = hit.getTrackable();
        // If a plane was hit, check that it was hit inside the plane polygon.
        // DepthPoints are only returned if Config.DepthMode is set to AUTOMATIC.
        if ((trackable instanceof Plane
                && ((Plane) trackable).isPoseInPolygon(hit.getHitPose())
                && (PlaneRenderer.calculateDistanceToPlane(hit.getHitPose(), camera.getPose()) > 0))
            || (trackable instanceof Point
                && ((Point) trackable).getOrientationMode()
                    == OrientationMode.ESTIMATED_SURFACE_NORMAL)
            || (trackable instanceof InstantPlacementPoint)
            || (trackable instanceof DepthPoint)) {
          // Cap the number of objects created. This avoids overloading both the
          // rendering system and ARCore.
          if (wrappedAnchors.size() >= 1) {
            wrappedAnchors.get(0).getAnchor().detach();
            wrappedAnchors.remove(0);
          }

          // Adding an Anchor tells ARCore that it should track this position in
          // space. This anchor is created on the Plane to place the 3D model
          // in the correct position relative both to the world and to the plane.
          wrappedAnchors.add(new WrappedAnchor(hit.createAnchor(), trackable));
          // For devices that support the Depth API, shows a dialog to suggest enabling
          // depth-based occlusion. This dialog needs to be spawned on the UI thread.
          this.runOnUiThread(this::showOcclusionDialogIfNeeded);

          // Hits are sorted by depth. Consider only closest hit on a plane, Oriented Point, or
          // Instant Placement Point.
          break;
        }
      }
    }
  }

  /**
   * Shows a pop-up dialog on the first call, determining whether the user wants to enable
   * depth-based occlusion. The result of this dialog can be retrieved with useDepthForOcclusion().
   */
  private void showOcclusionDialogIfNeeded() {
    boolean isDepthSupported = session.isDepthModeSupported(Config.DepthMode.AUTOMATIC);
    if (!depthSettings.shouldShowDepthEnableDialog() || !isDepthSupported) {
      return; // Don't need to show dialog.
    }
    
    

    // Asks the user whether they want to use depth-based occlusion.
    new AlertDialog.Builder(this)
        .setTitle(HelloArActivity.this.R.getIdentifier("options_title_with_depth", "string", getApplicationContext().getPackageName()))
        .setMessage(HelloArActivity.this.R.getIdentifier("depth_use_explanation", "string", getApplicationContext().getPackageName()))
        .setPositiveButton(
            HelloArActivity.this.R.getIdentifier("button_text_enable_depth", "string", getApplicationContext().getPackageName()),
            (DialogInterface dialog, int which) -> {
              depthSettings.setUseDepthForOcclusion(true);
            })
        .setNegativeButton(
            HelloArActivity.this.R.getIdentifier("button_text_disable_depth", "string", getApplicationContext().getPackageName()),
            (DialogInterface dialog, int which) -> {
              depthSettings.setUseDepthForOcclusion(false);
            })
        .show();
  }

  private void launchInstantPlacementSettingsMenuDialog() {
    resetSettingsMenuDialogCheckboxes();
    Resources resources = getResources();
    
    new AlertDialog.Builder(this)
        .setTitle(HelloArActivity.this.R.getIdentifier("options_title_instant_placement", "string", getApplicationContext().getPackageName()))
        .setMultiChoiceItems(
            resources.getStringArray(HelloArActivity.this.R.getIdentifier("instant_placement_options_array", "array", getApplicationContext().getPackageName())),
            instantPlacementSettingsMenuDialogCheckboxes,
            (DialogInterface dialog, int which, boolean isChecked) ->
                instantPlacementSettingsMenuDialogCheckboxes[which] = isChecked)
        .setPositiveButton(
            HelloArActivity.this.R.getIdentifier("done", "string", getApplicationContext().getPackageName()),
            (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
        .setNegativeButton(
            android.R.string.cancel,
            (DialogInterface dialog, int which) -> resetSettingsMenuDialogCheckboxes())
        .show();
  }

  /** Shows checkboxes to the user to facilitate toggling of depth-based effects. */
  private void launchDepthSettingsMenuDialog() {
    // Retrieves the current settings to show in the checkboxes.
    resetSettingsMenuDialogCheckboxes();
	
    // Shows the dialog to the user.
    Resources resources = getResources();
    if (session.isDepthModeSupported(Config.DepthMode.AUTOMATIC)) {
      // With depth support, the user can select visualization options.
      new AlertDialog.Builder(this)
          .setTitle(HelloArActivity.this.R.getIdentifier("options_title_with_depth", "string", getApplicationContext().getPackageName()))
          .setMultiChoiceItems(
              resources.getStringArray(HelloArActivity.this.R.getIdentifier("depth_options_array", "array", getApplicationContext().getPackageName())),
              depthSettingsMenuDialogCheckboxes,
              (DialogInterface dialog, int which, boolean isChecked) ->
                  depthSettingsMenuDialogCheckboxes[which] = isChecked)
          .setPositiveButton(
              HelloArActivity.this.R.getIdentifier("done", "string", getApplicationContext().getPackageName()),
              (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
          .setNegativeButton(
              android.R.string.cancel,
              (DialogInterface dialog, int which) -> resetSettingsMenuDialogCheckboxes())
          .show();
    } else {
      // Without depth support, no settings are available.
      new AlertDialog.Builder(this)
          .setTitle(HelloArActivity.this.R.getIdentifier("options_title_without_depth", "string", getApplicationContext().getPackageName()))
          .setPositiveButton(
              HelloArActivity.this.R.getIdentifier("done", "string", getApplicationContext().getPackageName()),
              (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
          .show();
    }
  }

  private void applySettingsMenuDialogCheckboxes() {
    depthSettings.setUseDepthForOcclusion(depthSettingsMenuDialogCheckboxes[0]);
    depthSettings.setDepthColorVisualizationEnabled(depthSettingsMenuDialogCheckboxes[1]);
    instantPlacementSettings.setInstantPlacementEnabled(
        instantPlacementSettingsMenuDialogCheckboxes[0]);
    configureSession();
  }

  private void resetSettingsMenuDialogCheckboxes() {
    depthSettingsMenuDialogCheckboxes[0] = depthSettings.useDepthForOcclusion();
    depthSettingsMenuDialogCheckboxes[1] = depthSettings.depthColorVisualizationEnabled();
    instantPlacementSettingsMenuDialogCheckboxes[0] =
        instantPlacementSettings.isInstantPlacementEnabled();
  }

  /** Checks if we detected at least one plane. */
  private boolean hasTrackingPlane() {
    for (Plane plane : session.getAllTrackables(Plane.class)) {
      if (plane.getTrackingState() == TrackingState.TRACKING) {
        return true;
      }
    }
    return false;
  }

  /** Update state based on the current frame's light estimation. */
  private void updateLightEstimation(LightEstimate lightEstimate, float[] viewMatrix) {
    if (lightEstimate.getState() != LightEstimate.State.VALID) {
      virtualObjectShader.setBool("u_LightEstimateIsValid", false);
      return;
    }
    virtualObjectShader.setBool("u_LightEstimateIsValid", true);

    Matrix.invertM(viewInverseMatrix, 0, viewMatrix, 0);
    virtualObjectShader.setMat4("u_ViewInverse", viewInverseMatrix);

    updateMainLight(
        lightEstimate.getEnvironmentalHdrMainLightDirection(),
        lightEstimate.getEnvironmentalHdrMainLightIntensity(),
        viewMatrix);
    updateSphericalHarmonicsCoefficients(
        lightEstimate.getEnvironmentalHdrAmbientSphericalHarmonics());
    cubemapFilter.update(lightEstimate.acquireEnvironmentalHdrCubeMap());
  }

  private void updateMainLight(float[] direction, float[] intensity, float[] viewMatrix) {
    // We need the direction in a vec4 with 0.0 as the final component to transform it to view space
    worldLightDirection[0] = direction[0];
    worldLightDirection[1] = direction[1];
    worldLightDirection[2] = direction[2];
    Matrix.multiplyMV(viewLightDirection, 0, viewMatrix, 0, worldLightDirection, 0);
    virtualObjectShader.setVec4("u_ViewLightDirection", viewLightDirection);
    virtualObjectShader.setVec3("u_LightIntensity", intensity);
  }

  private void updateSphericalHarmonicsCoefficients(float[] coefficients) {
    // Pre-multiply the spherical harmonics coefficients before passing them to the shader. The
    // constants in sphericalHarmonicFactors were derived from three terms:
    //
    // 1. The normalized spherical harmonics basis functions (y_lm)
    //
    // 2. The lambertian diffuse BRDF factor (1/pi)
    //
    // 3. A <cos> convolution. This is done to so that the resulting function outputs the irradiance
    // of all incoming light over a hemisphere for a given surface normal, which is what the shader
    // (environmental_hdr.frag) expects.
    //
    // You can read more details about the math here:
    // https://google.github.io/filament/Filament.html#annex/sphericalharmonics

    if (coefficients.length != 9 * 3) {
      throw new IllegalArgumentException(
          "The given coefficients array must be of length 27 (3 components per 9 coefficients");
    }

    // Apply each factor to every component of each coefficient
    for (int i = 0; i < 9 * 3; ++i) {
      sphericalHarmonicsCoefficients[i] = coefficients[i] * sphericalHarmonicFactors[i / 3];
    }
    virtualObjectShader.setVec3Array(
        "u_SphericalHarmonicsCoefficients", sphericalHarmonicsCoefficients);
  }

  /** Configures the session with feature settings. */
  private void configureSession() {
    Config config = session.getConfig();
    config.setLightEstimationMode(Config.LightEstimationMode.ENVIRONMENTAL_HDR);
    if (session.isDepthModeSupported(Config.DepthMode.AUTOMATIC)) {
      config.setDepthMode(Config.DepthMode.AUTOMATIC);
    } else {
      config.setDepthMode(Config.DepthMode.DISABLED);
    }
    if (instantPlacementSettings.isInstantPlacementEnabled()) {
      config.setInstantPlacementMode(InstantPlacementMode.LOCAL_Y_UP);
    } else {
      config.setInstantPlacementMode(InstantPlacementMode.DISABLED);
    }
    session.configure(config);
  }
}

/**
 * Associates an Anchor with the trackable it was attached to. This is used to be able to check
 * whether or not an Anchor originally was attached to an {@link InstantPlacementPoint}.
 */
class WrappedAnchor {
  private Anchor anchor;
  private Trackable trackable;

  public WrappedAnchor(Anchor anchor, Trackable trackable) {
    this.anchor = anchor;
    this.trackable = trackable;
  }

  public Anchor getAnchor() {
    return anchor;
  }

  public Trackable getTrackable() {
    return trackable;
  }
}
